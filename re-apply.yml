name: Terraform Apply

on:
  push:
    branches: [main, master]
  workflow_call:
    inputs:
      tf_workspace:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: "ap-southeast-2"
      gh_repo:
        type: string
        required: true
      databricks_account_id:
        type: string
        required: false
      target_role_arn:
        type: string
        required: true
      tag:
        required: true
        type: string
      tf_dir:
        required: true
        type: string
      tf_file:
        required: true
        type: string
      cloud:
        required: true
        type: string
      workspace_s3_bucket_name:
        required: false
        type: string
      databricks_relay_endpoint_id:
        required: false
        type: string
      databricks_workspace_endpoint_id:
        required: false
        type: string
      databricks_workspace_id:
        required: false
        type: string
      databricks_workspace_url:
        required: false
        type: string
      azure_client_id:
        required: false
        type: string
      azure_sub_id:
        required: false
        type : string
      azure_tenant_id:
        required: false
        type: string
      storage_account_name:
        required: false
        type: string
      vnet_id:
        required: false
        type: string
      subnet_id:
        required: false
        type: string

    secrets:
      RIOTINTO_ORG_TOKEN:
        required: true
      CUSTOM_GITHUB_TOKEN:
        required: false
      databricks_client_id:
        required: false
      databricks_client_secret:
        required: false

    outputs:
      aws_databricks_workspace_id:
        description: "AWS Databricks id"
        value: ${{ jobs.aws-terraform-apply.outputs.databricks_workspace_id }}
      azure_databricks_workspace_id:
        description: "Azure Databricks id"
        value: ${{ jobs.azure-terraform-apply.outputs.databricks_workspace_id }}
      databricks_workspace_id:
        description: "Databricks workspace id (AWS or Azure)"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.databricks_workspace_id || jobs.azure-terraform-apply.outputs.databricks_workspace_id }}
      databricks_workspace_url:
        description: "Databricks workspace URL (AWS or Azure)"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.databricks_workspace_url || jobs.azure-terraform-apply.outputs.databricks_workspace_url }}
      # Additional surfaced outputs for downstream jobs (AWS or Azure)
      vnet_id:
        description: "VNet ID (Azure) or empty (AWS)"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.vnet_id || jobs.azure-terraform-apply.outputs.vnet_id }}
      subnet_ids:
        description: "Subnet IDs (JSON array/string)"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.subnet_ids || jobs.azure-terraform-apply.outputs.subnet_ids }}
      vpc_relay_endpoint_id:
        description: "Private Relay Endpoint ID"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.vpc_relay_endpoint_id || jobs.azure-terraform-apply.outputs.vpc_relay_endpoint_id }}
      vpc_workspace_endpoint_id:
        description: "Workspace Private Endpoint ID"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.vpc_workspace_endpoint_id || jobs.azure-terraform-apply.outputs.vpc_workspace_endpoint_id }}
      instance_profile_id:
        description: "Instance Profile ID"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.instance_profile_id || jobs.azure-terraform-apply.outputs.instance_profile_id }}
      catalog_ids:
        description: "Unity Catalog IDs"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.catalog_ids || jobs.azure-terraform-apply.outputs.catalog_ids }}
      schema_ids:
        description: "Unity Schema IDs"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.schema_ids || jobs.azure-terraform-apply.outputs.schema_ids }}
      external_location_ids:
        description: "External Location IDs"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.external_location_ids || jobs.azure-terraform-apply.outputs.external_location_ids }}
      volume_ids:
        description: "Volume IDs"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.volume_ids || jobs.azure-terraform-apply.outputs.volume_ids }}
      compute_cluster_ids:
        description: "Compute Cluster IDs"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.compute_cluster_ids || jobs.azure-terraform-apply.outputs.compute_cluster_ids }}
      sql_warehouse_ids:
        description: "SQL Warehouse IDs"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.sql_warehouse_ids || jobs.azure-terraform-apply.outputs.sql_warehouse_ids }}
      service_principal_ids:
        description: "Service Principal IDs"
        value: ${{ inputs.cloud == 'aws' && jobs.aws-terraform-apply.outputs.service_principal_ids || jobs.azure-terraform-apply.outputs.service_principal_ids }}

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

jobs:

################################################################################
# AWS Terraform Apply
################################################################################

  aws-terraform-apply:
    if: ${{ inputs.cloud == 'aws' }}
    runs-on: ubuntu-latest

    outputs:
      databricks_workspace_id: ${{ steps.tfApply.outputs.databricks_workspace_id }}
      databricks_workspace_url: ${{ steps.tfApply.outputs.databricks_workspace_url }}
      # AWS outputs collected from apply steps
      vnet_id: ${{ steps.tfApply.outputs.vnet_id || steps.tfApplyIam.outputs.vnet_id || steps.tfApplyCatalogs.outputs.vnet_id || steps.tfApplyCompute.outputs.vnet_id }}
      subnet_ids: ${{ steps.tfApply.outputs.subnet_ids || steps.tfApplyIam.outputs.subnet_ids || steps.tfApplyCatalogs.outputs.subnet_ids || steps.tfApplyCompute.outputs.subnet_ids }}
      vpc_relay_endpoint_id: ${{ steps.tfApply.outputs.vpc_relay_endpoint_id || steps.tfApplyIam.outputs.vpc_relay_endpoint_id || steps.tfApplyCatalogs.outputs.vpc_relay_endpoint_id || steps.tfApplyCompute.outputs.vpc_relay_endpoint_id }}
      vpc_workspace_endpoint_id: ${{ steps.tfApply.outputs.vpc_workspace_endpoint_id || steps.tfApplyIam.outputs.vpc_workspace_endpoint_id || steps.tfApplyCatalogs.outputs.vpc_workspace_endpoint_id || steps.tfApplyCompute.outputs.vpc_workspace_endpoint_id }}
      instance_profile_id: ${{ steps.tfApply.outputs.instance_profile_id || steps.tfApplyIam.outputs.instance_profile_id || steps.tfApplyCatalogs.outputs.instance_profile_id || steps.tfApplyCompute.outputs.instance_profile_id }}
      catalog_ids: ${{ steps.tfApply.outputs.catalog_ids || steps.tfApplyIam.outputs.catalog_ids || steps.tfApplyCatalogs.outputs.catalog_ids || steps.tfApplyCompute.outputs.catalog_ids }}
      schema_ids: ${{ steps.tfApply.outputs.schema_ids || steps.tfApplyIam.outputs.schema_ids || steps.tfApplyCatalogs.outputs.schema_ids || steps.tfApplyCompute.outputs.schema_ids }}
      external_location_ids: ${{ steps.tfApply.outputs.external_location_ids || steps.tfApplyIam.outputs.external_location_ids || steps.tfApplyCatalogs.outputs.external_location_ids || steps.tfApplyCompute.outputs.external_location_ids }}
      volume_ids: ${{ steps.tfApply.outputs.volume_ids || steps.tfApplyIam.outputs.volume_ids || steps.tfApplyCatalogs.outputs.volume_ids || steps.tfApplyCompute.outputs.volume_ids }}
      compute_cluster_ids: ${{ steps.tfApply.outputs.compute_cluster_ids || steps.tfApplyIam.outputs.compute_cluster_ids || steps.tfApplyCatalogs.outputs.compute_cluster_ids || steps.tfApplyCompute.outputs.compute_cluster_ids }}
      sql_warehouse_ids: ${{ steps.tfApply.outputs.sql_warehouse_ids || steps.tfApplyIam.outputs.sql_warehouse_ids || steps.tfApplyCatalogs.outputs.sql_warehouse_ids || steps.tfApplyCompute.outputs.sql_warehouse_ids }}
      service_principal_ids: ${{ steps.tfApply.outputs.service_principal_ids || steps.tfApplyIam.outputs.service_principal_ids || steps.tfApplyCatalogs.outputs.service_principal_ids || steps.tfApplyCompute.outputs.service_principal_ids }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: rio-tinto/${{ inputs.gh_repo }}
          ref: ${{ inputs.tag || github.ref }}

      - name: Configure GitHub credentials
        run: |
          git config --global url."https://${{ secrets.RIOTINTO_ORG_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          git config --list
        working-directory: "${{ inputs.tf_dir }}"

      # Login to AWS
      - name: OIDC Login to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.target_role_arn }}
          role-session-name: DNA-Automation-Github-Actions-Role
          aws-region: ${{ inputs.aws_region }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Initialize Terraform working directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ${{ inputs.tf_dir }}
          terraform init

      - name: Create or Select Workspace
        run: |
          cd ${{ inputs.tf_dir }}
          WORKSPACE="${{ inputs.tf_workspace }}"
          
          # Check if workspace exists
          if terraform workspace list | grep -q "$WORKSPACE"; then
            echo "Workspace $WORKSPACE already exists, selecting it"
            terraform workspace select $WORKSPACE
          else
            echo "Creating new workspace $WORKSPACE"
            terraform workspace new $WORKSPACE
          fi

      - name: Terraform Apply
        if: ${{ inputs.databricks_account_id != '782ba817-b9bf-4033-9aa9-56bb80139fba' }}
        env:
          TF_VAR_github_token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        run: |
          cd ${{ inputs.tf_dir }}
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -var-file=${{ inputs.tf_file }} -auto-approve
          fi

      - name: Terraform Apply Databricks Workspace
        id: tfApply
        if: ${{ inputs.databricks_account_id == '782ba817-b9bf-4033-9aa9-56bb80139fba' && inputs.tf_dir == 'workspace' }}
        env:
          DATABRICKS_HOST: "https://accounts.cloud.databricks.com"
          DATABRICKS_ACCOUNT_ID: ${{ inputs.databricks_account_id }}
          DATABRICKS_CLIENT_ID: ${{ secrets.databricks_client_id }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.databricks_client_secret }}
        run: |
          cd ${{ inputs.tf_dir }}
          if [ ! -f "tfplan" ]; then
            terraform plan -var-file='${{ inputs.tf_file }}' \
            -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
            -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}' \
            -var 'databricks_workspace_endpoint_id=${{ inputs.databricks_workspace_endpoint_id }}' \
            -var 'databricks_relay_endpoint_id=${{ inputs.databricks_relay_endpoint_id }}' \
            -out=tfplan
          fi
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -var-file='${{ inputs.tf_file }}' -auto-approve \
            -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
            -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}' \
            -var 'databricks_workspace_endpoint_id=${{ inputs.databricks_workspace_endpoint_id }}' \
            -var 'databricks_relay_endpoint_id=${{ inputs.databricks_relay_endpoint_id }}'
          fi

          echo "databricks_workspace_id=$(terraform output -raw databricks_workspace_id)" >> $GITHUB_OUTPUT
          echo "databricks_workspace_url=$(terraform output -raw databricks_workspace_url)" >> $GITHUB_OUTPUT

          # Collect outputs (emit empty/null if not present)
          VNET_ID=$(terraform output -raw vnet_id 2>/dev/null || echo "")
          SUBNET_IDS=$(terraform output -json subnet_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          RELAY_EP=$(terraform output -raw vpc_relay_endpoint_id 2>/dev/null || echo "")
          WS_EP=$(terraform output -raw vpc_workspace_endpoint_id 2>/dev/null || echo "")
          INSTANCE_PROFILE_ID=$(terraform output -raw access_connector_id 2>/dev/null || echo "")
          CATALOG_IDS=$(terraform output -json catalog_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SCHEMA_IDS=$(terraform output -json schema_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          EXT_LOC_IDS=$(terraform output -json external_location_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          VOLUME_IDS=$(terraform output -json volume_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          CLUSTER_IDS=$(terraform output -json compute_cluster_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SQL_WH_IDS=$(terraform output -json sql_warehouse_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SP_IDS=$(terraform output -json service_principal_map 2>/dev/null | jq -c . 2>/dev/null || echo "null")

          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "vpc_relay_endpoint_id=$RELAY_EP" >> $GITHUB_OUTPUT
          echo "vpc_workspace_endpoint_id=$WS_EP" >> $GITHUB_OUTPUT
          echo "instance_profile_id=$INSTANCE_PROFILE_ID" >> $GITHUB_OUTPUT
          echo "catalog_ids=$CATALOG_IDS" >> $GITHUB_OUTPUT
          echo "schema_ids=$SCHEMA_IDS" >> $GITHUB_OUTPUT
          echo "external_location_ids=$EXT_LOC_IDS" >> $GITHUB_OUTPUT
          echo "volume_ids=$VOLUME_IDS" >> $GITHUB_OUTPUT
          echo "compute_cluster_ids=$CLUSTER_IDS" >> $GITHUB_OUTPUT
          echo "sql_warehouse_ids=$SQL_WH_IDS" >> $GITHUB_OUTPUT
          echo "service_principal_ids=$SP_IDS" >> $GITHUB_OUTPUT

      - name: Terraform Apply Databricks Workspace Iam
        id: tfApplyIam
        if: ${{ inputs.databricks_account_id == '782ba817-b9bf-4033-9aa9-56bb80139fba' && inputs.tf_dir == 'workspace-iam' }}
        env:
          DATABRICKS_HOST: "https://accounts.cloud.databricks.com"
          DATABRICKS_ACCOUNT_ID: ${{ inputs.databricks_account_id }}
          DATABRICKS_CLIENT_ID: ${{ secrets.databricks_client_id }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.databricks_client_secret }}
        run: |
          cd ${{ inputs.tf_dir }}
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -var-file='${{ inputs.tf_file }}' -auto-approve \
            -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
            -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}' \
            -var 'databricks_workspace_id=${{ inputs.databricks_workspace_id }}' \
            -var 'databricks_workspace_url=${{ inputs.databricks_workspace_url }}'
          fi

          # Collect outputs (emit empty/null if not present)
          VNET_ID=$(terraform output -raw vnet_id 2>/dev/null || echo "")
          SUBNET_IDS=$(terraform output -json subnet_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          RELAY_EP=$(terraform output -raw vpc_relay_endpoint_id 2>/dev/null || echo "")
          WS_EP=$(terraform output -raw vpc_workspace_endpoint_id 2>/dev/null || echo "")
          INSTANCE_PROFILE_ID=$(terraform output -raw access_connector_id 2>/dev/null || echo "")
          CATALOG_IDS=$(terraform output -json catalog_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SCHEMA_IDS=$(terraform output -json schema_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          EXT_LOC_IDS=$(terraform output -json external_location_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          VOLUME_IDS=$(terraform output -json volume_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          CLUSTER_IDS=$(terraform output -json compute_cluster_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SQL_WH_IDS=$(terraform output -json sql_warehouse_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SP_IDS=$(terraform output -json service_principal_map 2>/dev/null | jq -c . 2>/dev/null || echo "null")

          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "vpc_relay_endpoint_id=$RELAY_EP" >> $GITHUB_OUTPUT
          echo "vpc_workspace_endpoint_id=$WS_EP" >> $GITHUB_OUTPUT
          echo "instance_profile_id=$INSTANCE_PROFILE_ID" >> $GITHUB_OUTPUT
          echo "catalog_ids=$CATALOG_IDS" >> $GITHUB_OUTPUT
          echo "schema_ids=$SCHEMA_IDS" >> $GITHUB_OUTPUT
          echo "external_location_ids=$EXT_LOC_IDS" >> $GITHUB_OUTPUT
          echo "volume_ids=$VOLUME_IDS" >> $GITHUB_OUTPUT
          echo "compute_cluster_ids=$CLUSTER_IDS" >> $GITHUB_OUTPUT
          echo "sql_warehouse_ids=$SQL_WH_IDS" >> $GITHUB_OUTPUT
          echo "service_principal_ids=$SP_IDS" >> $GITHUB_OUTPUT

      - name: Terraform Apply Databricks Catalogs
        id: tfApplyCatalogs
        if: ${{ inputs.databricks_account_id == '782ba817-b9bf-4033-9aa9-56bb80139fba' && inputs.tf_dir == 'catalogs' }}
        env:
          DATABRICKS_HOST: "https://accounts.cloud.databricks.com"
          DATABRICKS_ACCOUNT_ID: ${{ inputs.databricks_account_id }}
          DATABRICKS_CLIENT_ID: ${{ secrets.databricks_client_id }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.databricks_client_secret }}
        run: |
          cd ${{ inputs.tf_dir }}
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -var-file='${{ inputs.tf_file }}' -auto-approve \
            -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
            -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}' \
            -var 'databricks_workspace_url=${{ inputs.databricks_workspace_url }}'
          fi

          # Collect outputs (emit empty/null if not present)
          VNET_ID=$(terraform output -raw vnet_id 2>/dev/null || echo "")
          SUBNET_IDS=$(terraform output -json subnet_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          RELAY_EP=$(terraform output -raw vpc_relay_endpoint_id 2>/dev/null || echo "")
          WS_EP=$(terraform output -raw vpc_workspace_endpoint_id 2>/dev/null || echo "")
          INSTANCE_PROFILE_ID=$(terraform output -raw access_connector_id 2>/dev/null || echo "")
          CATALOG_IDS=$(terraform output -json catalog_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SCHEMA_IDS=$(terraform output -json schema_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          EXT_LOC_IDS=$(terraform output -json external_location_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          VOLUME_IDS=$(terraform output -json volume_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          CLUSTER_IDS=$(terraform output -json compute_cluster_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SQL_WH_IDS=$(terraform output -json sql_warehouse_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SP_IDS=$(terraform output -json service_principal_map 2>/dev/null | jq -c . 2>/dev/null || echo "null")

          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "vpc_relay_endpoint_id=$RELAY_EP" >> $GITHUB_OUTPUT
          echo "vpc_workspace_endpoint_id=$WS_EP" >> $GITHUB_OUTPUT
          echo "instance_profile_id=$INSTANCE_PROFILE_ID" >> $GITHUB_OUTPUT
          echo "catalog_ids=$CATALOG_IDS" >> $GITHUB_OUTPUT
          echo "schema_ids=$SCHEMA_IDS" >> $GITHUB_OUTPUT
          echo "external_location_ids=$EXT_LOC_IDS" >> $GITHUB_OUTPUT
          echo "volume_ids=$VOLUME_IDS" >> $GITHUB_OUTPUT
          echo "compute_cluster_ids=$CLUSTER_IDS" >> $GITHUB_OUTPUT
          echo "sql_warehouse_ids=$SQL_WH_IDS" >> $GITHUB_OUTPUT
          echo "service_principal_ids=$SP_IDS" >> $GITHUB_OUTPUT

      - name: Terraform Apply Databricks Compute
        id: tfApplyCompute
        if: ${{ inputs.databricks_account_id == '782ba817-b9bf-4033-9aa9-56bb80139fba' && inputs.tf_dir == 'compute' }}
        env:
          DATABRICKS_HOST: "https://accounts.cloud.databricks.com"
          DATABRICKS_ACCOUNT_ID: ${{ inputs.databricks_account_id }}
          DATABRICKS_CLIENT_ID: ${{ secrets.databricks_client_id }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.databricks_client_secret }}
        run: |
          cd ${{ inputs.tf_dir }}
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -var-file='${{ inputs.tf_file }}' -auto-approve \
            -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
            -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}' \
            -var 'databricks_workspace_url=${{ inputs.databricks_workspace_url }}'
          fi

          # Collect outputs (emit empty/null if not present)
          VNET_ID=$(terraform output -raw vnet_id 2>/dev/null || echo "")
          SUBNET_IDS=$(terraform output -json subnet_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          RELAY_EP=$(terraform output -raw vpc_relay_endpoint_id 2>/dev/null || echo "")
          WS_EP=$(terraform output -raw vpc_workspace_endpoint_id 2>/dev/null || echo "")
          INSTANCE_PROFILE_ID=$(terraform output -raw access_connector_id 2>/dev/null || echo "")
          CATALOG_IDS=$(terraform output -json catalog_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SCHEMA_IDS=$(terraform output -json schema_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          EXT_LOC_IDS=$(terraform output -json external_location_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          VOLUME_IDS=$(terraform output -json volume_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          CLUSTER_IDS=$(terraform output -json compute_cluster_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SQL_WH_IDS=$(terraform output -json sql_warehouse_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")
          SP_IDS=$(terraform output -json service_principal_map 2>/dev/null | jq -c . 2>/dev/null || echo "null")

          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "vpc_relay_endpoint_id=$RELAY_EP" >> $GITHUB_OUTPUT
          echo "vpc_workspace_endpoint_id=$WS_EP" >> $GITHUB_OUTPUT
          echo "instance_profile_id=$INSTANCE_PROFILE_ID" >> $GITHUB_OUTPUT
          echo "catalog_ids=$CATALOG_IDS" >> $GITHUB_OUTPUT
          echo "schema_ids=$SCHEMA_IDS" >> $GITHUB_OUTPUT
          echo "external_location_ids=$EXT_LOC_IDS" >> $GITHUB_OUTPUT
          echo "volume_ids=$VOLUME_IDS" >> $GITHUB_OUTPUT
          echo "compute_cluster_ids=$CLUSTER_IDS" >> $GITHUB_OUTPUT
          echo "sql_warehouse_ids=$SQL_WH_IDS" >> $GITHUB_OUTPUT
          echo "service_principal_ids=$SP_IDS" >> $GITHUB_OUTPUT

      # (Removed) Separate AWS collector; outputs now gathered in apply steps above

################################################################################
# Azure Terraform Apply
################################################################################

  azure-terraform-apply:
    runs-on: ubuntu-latest
    if: ${{ inputs.cloud == 'az' }}

    outputs:
      databricks_workspace_id: ${{ steps.tf-apply-workspace.outputs.databricks_workspace_id }}
      databricks_workspace_url: ${{ steps.tf-apply-workspace.outputs.databricks_workspace_url }}
      # Collected outputs from apply steps
      vnet_id: ${{ steps.tf-apply-azure-infra.outputs.vnet_id || steps.tf-apply-workspace.outputs.vnet_id || steps.tf-apply-non-workspace.outputs.vnet_id }}
      subnet_ids: ${{ steps.tf-apply-azure-infra.outputs.subnet_ids || steps.tf-apply-workspace.outputs.subnet_ids || steps.tf-apply-non-workspace.outputs.subnet_ids }}
      vpc_relay_endpoint_id: ${{ steps.tf-apply-azure-infra.outputs.vpc_relay_endpoint_id || steps.tf-apply-workspace.outputs.vpc_relay_endpoint_id || steps.tf-apply-non-workspace.outputs.vpc_relay_endpoint_id }}
      vpc_workspace_endpoint_id: ${{ steps.tf-apply-azure-infra.outputs.vpc_workspace_endpoint_id || steps.tf-apply-workspace.outputs.vpc_workspace_endpoint_id || steps.tf-apply-non-workspace.outputs.vpc_workspace_endpoint_id }}
      instance_profile_id: ${{ steps.tf-apply-azure-infra.outputs.instance_profile_id || steps.tf-apply-workspace.outputs.instance_profile_id || steps.tf-apply-non-workspace.outputs.instance_profile_id }}
      catalog_ids: ${{ steps.tf-apply-azure-infra.outputs.catalog_ids || steps.tf-apply-workspace.outputs.catalog_ids || steps.tf-apply-non-workspace.outputs.catalog_ids }}
      schema_ids: ${{ steps.tf-apply-azure-infra.outputs.schema_ids || steps.tf-apply-workspace.outputs.schema_ids || steps.tf-apply-non-workspace.outputs.schema_ids }}
      external_location_ids: ${{ steps.tf-apply-azure-infra.outputs.external_location_ids || steps.tf-apply-workspace.outputs.external_location_ids || steps.tf-apply-non-workspace.outputs.external_location_ids }}
      volume_ids: ${{ steps.tf-apply-azure-infra.outputs.volume_ids || steps.tf-apply-workspace.outputs.volume_ids || steps.tf-apply-non-workspace.outputs.volume_ids }}
      compute_cluster_ids: ${{ steps.tf-apply-azure-infra.outputs.compute_cluster_ids || steps.tf-apply-workspace.outputs.compute_cluster_ids || steps.tf-apply-non-workspace.outputs.compute_cluster_ids }}
      sql_warehouse_ids: ${{ steps.tf-apply-azure-infra.outputs.sql_warehouse_ids || steps.tf-apply-workspace.outputs.sql_warehouse_ids || steps.tf-apply-non-workspace.outputs.sql_warehouse_ids }}
      service_principal_ids: ${{ steps.tf-apply-azure-infra.outputs.service_principal_ids || steps.tf-apply-workspace.outputs.service_principal_ids || steps.tf-apply-non-workspace.outputs.service_principal_ids }}

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          repository: rio-tinto/${{ inputs.gh_repo }}
          ref: ${{ inputs.tag || github.ref }}

      # Configure Github Creds
      - name: Configure GitHub credentials
        run: |
          git config --global url."https://${{ secrets.RIOTINTO_ORG_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          git config --list
        working-directory: "${{ inputs.tf_dir }}"  

      # Authenticate to Lakehouse AWS Shared Account for statefile management
      - name: Authenticate to Lakehouse shared account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.target_role_arn }}
          role-session-name: GithubActions-${{ github.event.repository.name }}-${{ github.run_id }}
          aws-region: ${{ inputs.aws_region }}
 
      # Authenticate to Azure using Service Principal
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_sub_id }}

      - name: Azure Account Show
        run: |
          az account show

      # Install Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      # Initialize the Terraform working directory
      - name: Initialize Terraform working directory
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ${{ inputs.tf_dir }}
          terraform init

      # Create or Select Terraform workspace
      - name: Create or Select Workspace
        run: |
          cd ${{ inputs.tf_dir }}
          WORKSPACE="${{ inputs.tf_workspace }}"

          # Check if workspace exists
          if terraform workspace list | grep -q "$WORKSPACE"; then
            echo "Workspace $WORKSPACE already exists, selecting it"
            terraform workspace select $WORKSPACE
          else
            echo "Creating new workspace $WORKSPACE"
            terraform workspace new $WORKSPACE
          fi

      # Apply Terraform to deploy Azure Infra resources
      - name: Terraform Apply (Azure Infra)
        if: ${{ !inputs.databricks_account_id }}
        id: tf-apply-azure-infra
        run: |
          cd ${{ inputs.tf_dir }}
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -var-file=${{ inputs.tf_file }} -auto-approve
          fi
          
          # Collect networking outputs
          if terraform output vnet_id >/dev/null 2>&1; then
            VNET_ID=$(terraform output -raw vnet_id)
          else
            VNET_ID=""
          fi
          
          if terraform output subnet_ids >/dev/null 2>&1; then
            SUBNET_IDS=$(terraform output -json subnet_ids | jq -c . 2>/dev/null || echo "null")
          else
            SUBNET_IDS="null"
          fi
          
          if terraform output vpc_relay_endpoint_id >/dev/null 2>&1; then
            RELAY_EP=$(terraform output -raw vpc_relay_endpoint_id)
          else
            RELAY_EP=""
          fi
          
          if terraform output vpc_workspace_endpoint_id >/dev/null 2>&1; then
            WS_EP=$(terraform output -raw vpc_workspace_endpoint_id)
          else
            WS_EP=""
          fi
          
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "vpc_relay_endpoint_id=$RELAY_EP" >> $GITHUB_OUTPUT
          echo "vpc_workspace_endpoint_id=$WS_EP" >> $GITHUB_OUTPUT

      # Apply Terraform to deploy Databricks Workspace resources
      - name: Terraform Apply (Databricks Workspace)
        if: ${{ inputs.databricks_account_id == 'fe1630db-b2af-4ac1-a394-9f0e33096a57' && endsWith(inputs.tf_dir, 'workspace') }}
        id: tf-apply-workspace
        run: |
          cd ${{ inputs.tf_dir }}
          terraform apply -var-file='${{ inputs.tf_file }}' -auto-approve \
          -var 'databricks_account_id=${{ inputs.databricks_account_id }}' \
          -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
          -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}'

          echo "databricks_workspace_id=$(terraform output -raw workspace_id)" >> $GITHUB_OUTPUT
          echo "databricks_workspace_url=$(terraform output -raw workspace_url)" >> $GITHUB_OUTPUT

          # Optionally surface workspace private endpoint id if present
          VPE=$(terraform output -raw vpc_workspace_endpoint_id 2>/dev/null || echo "")
          if [ -n "$VPE" ]; then
            echo "vpc_workspace_endpoint_id=$VPE" >> $GITHUB_OUTPUT
          fi
          
          # Collect all workspace outputs
          if terraform output vnet_id >/dev/null 2>&1; then
            VNET_ID=$(terraform output -raw vnet_id)
          else
            VNET_ID=""
          fi
          
          if terraform output subnet_ids >/dev/null 2>&1; then
            SUBNET_IDS=$(terraform output -json subnet_ids | jq -c . 2>/dev/null || echo "null")
          else
            SUBNET_IDS="null"
          fi
          
          if terraform output vpc_relay_endpoint_id >/dev/null 2>&1; then
            RELAY_EP=$(terraform output -raw vpc_relay_endpoint_id)
          else
            RELAY_EP=""
          fi
          
          if terraform output vpc_workspace_endpoint_id >/dev/null 2>&1; then
            WS_EP=$(terraform output -raw vpc_workspace_endpoint_id)
          else
            WS_EP=""
          fi
          
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "vpc_relay_endpoint_id=$RELAY_EP" >> $GITHUB_OUTPUT
          echo "vpc_workspace_endpoint_id=$WS_EP" >> $GITHUB_OUTPUT
          echo "instance_profile_id=$(terraform output -raw access_connector_id 2>/dev/null || echo "")" >> $GITHUB_OUTPUT
          echo "catalog_ids=$(terraform output -json catalog_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "schema_ids=$(terraform output -json schema_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "external_location_ids=$(terraform output -json external_location_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "volume_ids=$(terraform output -json volume_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "compute_cluster_ids=$(terraform output -json compute_cluster_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "sql_warehouse_ids=$(terraform output -json sql_warehouse_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "service_principal_ids=$(terraform output -json service_principal_map 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT


      # Apply Terraform to deploy Databricks Non-Workspace resources
      - name: Terraform Apply (Databricks Non-Workspace)
        id: tf-apply-non-workspace
        if: ${{ inputs.databricks_account_id == 'fe1630db-b2af-4ac1-a394-9f0e33096a57' && !endsWith(inputs.tf_dir, 'workspace') }}
        run: |
          cd ${{ inputs.tf_dir }}
          if [[ "${{ inputs.tf_dir }}" == "compute" || "${{ inputs.tf_dir }}" == "catalogs" ]]; then
            terraform apply -var-file='${{ inputs.tf_file }}' -auto-approve \
            -var databricks_workspace_url=${{ inputs.databricks_workspace_url }} \
            -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
            -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}'
          else
            terraform apply -var-file='${{ inputs.tf_file }}' -auto-approve \
            -var databricks_account_id=${{ inputs.databricks_account_id }} \
            -var databricks_workspace_id=${{ inputs.databricks_workspace_id }} \
            -var databricks_workspace_url=${{ inputs.databricks_workspace_url }} \
            -var 'databricks_client_id=${{ secrets.databricks_client_id }}' \
            -var 'databricks_client_secret=${{ secrets.databricks_client_secret }}'
          fi
          
          # Collect all non-workspace outputs
          if terraform output vnet_id >/dev/null 2>&1; then
            VNET_ID=$(terraform output -raw vnet_id)
          else
            VNET_ID=""
          fi
          
          if terraform output subnet_ids >/dev/null 2>&1; then
            SUBNET_IDS=$(terraform output -json subnet_ids | jq -c . 2>/dev/null || echo "null")
          else
            SUBNET_IDS="null"
          fi
          
          if terraform output vpc_relay_endpoint_id >/dev/null 2>&1; then
            RELAY_EP=$(terraform output -raw vpc_relay_endpoint_id)
          else
            RELAY_EP=""
          fi
          
          if terraform output vpc_workspace_endpoint_id >/dev/null 2>&1; then
            WS_EP=$(terraform output -raw vpc_workspace_endpoint_id)
          else
            WS_EP=""
          fi
          
          echo "vnet_id=$VNET_ID" >> $GITHUB_OUTPUT
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "vpc_relay_endpoint_id=$RELAY_EP" >> $GITHUB_OUTPUT
          echo "vpc_workspace_endpoint_id=$WS_EP" >> $GITHUB_OUTPUT
          echo "instance_profile_id=$(terraform output -raw access_connector_id 2>/dev/null || echo "")" >> $GITHUB_OUTPUT
          echo "catalog_ids=$(terraform output -json catalog_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "schema_ids=$(terraform output -json schema_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "external_location_ids=$(terraform output -json external_location_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "volume_ids=$(terraform output -json volume_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "compute_cluster_ids=$(terraform output -json compute_cluster_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "sql_warehouse_ids=$(terraform output -json sql_warehouse_ids 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
          echo "service_principal_ids=$(terraform output -json service_principal_map 2>/dev/null | jq -c . 2>/dev/null || echo "null")" >> $GITHUB_OUTPUT
