name: TF Outputs to Domain Integration
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      workspace_id:
        required: true
        type: string
      workspace_url:
        required: true
        type: string
      service_principal_ids:
        required: true
        type: string
      vpc_relay_endpoint_id:
        required: true
        type: string
      vpc_workspace_endpoint_id:
        required: true
        type: string
      catalog_ids:
        required: true
        type: string
      schema_ids:
        required: true
        type: string
      external_location_ids:
        required: true
        type: string
      volume_ids:
        required: true
        type: string
      cluster_ids:
        required: true
        type: string
      sql_warehouse_ids:
        required: true
        type: string
      instance_profile_id:
        required: true
        type: string
      target_role_arn:
        required: true
        type: string
      vnet_id:
        required: true
        type: string
      subnet_ids:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: "ap-southeast-2"
    outputs:
      domain_config:
        value: ${{ jobs.transform.outputs.domain_config }}

jobs:
  transform:
    runs-on: ubuntu-latest
    outputs:
      domain_config: ${{ steps.create-config.outputs.domain_config }}
    steps:
      - name: Create Complete Inventory
        id: create-config
        run: |
          echo "=== Received inputs for domain integration ==="
          echo "environment: ${{ inputs.environment }}"
          echo "workspace_id: ${{ inputs.workspace_id }}"
          echo "workspace_url: ${{ inputs.workspace_url }}"
          echo "service_principal_ids: ${{ inputs.service_principal_ids }}"
          echo "vpc_relay_endpoint_id: ${{ inputs.vpc_relay_endpoint_id }}"
          echo "vpc_workspace_endpoint_id: ${{ inputs.vpc_workspace_endpoint_id }}"
          echo "catalog_ids: ${{ inputs.catalog_ids }}"
          echo "schema_ids: ${{ inputs.schema_ids }}"
          echo "external_location_ids: ${{ inputs.external_location_ids }}"
          echo "volume_ids: ${{ inputs.volume_ids }}"
          echo "cluster_ids: ${{ inputs.cluster_ids }}"
          echo "sql_warehouse_ids: ${{ inputs.sql_warehouse_ids }}"
          echo "instance_profile_id: ${{ inputs.instance_profile_id }}"
          echo "vnet_id: ${{ inputs.vnet_id }}"
          echo "subnet_ids: ${{ inputs.subnet_ids }}"
          echo "================================================"
          
          # Create JSON using jq to properly handle input values
          jq -n \
            --arg workspace_id "${{ inputs.workspace_id }}" \
            --arg workspace_url "${{ inputs.workspace_url }}" \
            --argjson service_principal_ids '${{ inputs.service_principal_ids }}' \
            --arg vpc_relay_endpoint_id "${{ inputs.vpc_relay_endpoint_id }}" \
            --arg vpc_workspace_endpoint_id "${{ inputs.vpc_workspace_endpoint_id }}" \
            --argjson catalog_ids '${{ inputs.catalog_ids && inputs.catalog_ids || 'null' }}' \
            --argjson schema_ids '${{ inputs.schema_ids && inputs.schema_ids || 'null' }}' \
            --argjson external_location_ids '${{ inputs.external_location_ids && inputs.external_location_ids || 'null' }}' \
            --argjson volume_ids '${{ inputs.volume_ids && inputs.volume_ids || 'null' }}' \
            --argjson cluster_ids '${{ inputs.cluster_ids && inputs.cluster_ids || 'null' }}' \
            --argjson sql_warehouse_ids '${{ inputs.sql_warehouse_ids && inputs.sql_warehouse_ids || 'null' }}' \
            --arg instance_profile_id "${{ inputs.instance_profile_id }}" \
            --arg vnet_id "${{ inputs.vnet_id }}" \
            --argjson subnet_ids '${{ inputs.subnet_ids && inputs.subnet_ids || 'null' }}' \
            '{
              workspace_id: $workspace_id,
              workspace_url: $workspace_url,
              service_principal_ids: $service_principal_ids,
              vpc_relay_endpoint_id: $vpc_relay_endpoint_id,
              vpc_workspace_endpoint_id: $vpc_workspace_endpoint_id,
              catalog_ids: $catalog_ids,
              schema_ids: $schema_ids,
              external_location_ids: $external_location_ids,
              volume_ids: $volume_ids,
              cluster_ids: $cluster_ids,
              sql_warehouse_ids: $sql_warehouse_ids,
              instance_profile_id: $instance_profile_id,
              vnet_id: $vnet_id,
              subnet_ids: $subnet_ids
            }' > securable-inventory-${{ inputs.environment }}.json
          
          echo "=== Generated JSON ==="
          cat securable-inventory-${{ inputs.environment }}.json
          echo "====================="
          
          DOMAIN_CONFIG=$(jq -c . securable-inventory-${{ inputs.environment }}.json)
          echo "domain_config=$DOMAIN_CONFIG" >> $GITHUB_OUTPUT
      - name: OIDC Login to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::340752807214:role/DNA-Automation-Github-Actions-Role"
          role-session-name: DNA-Automation-Github-Actions-Role
          aws-region: ${{ inputs.aws_region }}
      - name: Store in DynamoDB
        run: |
          cat securable-inventory-${{ inputs.environment }}.json | jq '. + {environment: "${{ inputs.environment }}", updated_at: "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"}' | \
          jq 'to_entries | map({(.key): (if .value == null then {"NULL": true} elif (.value | type) == "string" then {"S": .value} elif (.value | type) == "array" then {"L": [.value[] | {"S": .}]} else {"S": (.value | tostring)} end)}) | add' > dynamodb-item.json
          aws dynamodb put-item \
            --table-name dynamodb-rtlh-di-aws-syd-prd-01 \
            --item file://dynamodb-item.json \
            --region ${{ inputs.aws_region }}
